package com.example.myreminders;

import android.content.Intent;
import android.os.Bundle;

import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.snackbar.Snackbar;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

public class AddReminder extends AppCompatActivity implements AdapterView.OnItemSelectedListener {

    // declare Intent
    Intent intent;

    // declare Bundle and long for data passed in the Bundle
    Bundle bundle;
    long id;

    // declare EditTexts
    EditText titleEditText;
    EditText dateEditText;

    // declare Spinner
    Spinner typeSpinner;

    // declare DBHandler
    DBHandler dbHandler;

    // declare String to store quantity selected by user
    String type;

    /**
     * This method initializes the AddItem Activity.
     * @param savedInstanceState a Bundle object that is passed into the onCreate
     *                           method of every Android Activity. Activities have
     *                           the ability, under special circumstances, to restore
     *                           themselves to a previous state using the data stored
     *                           in this bundle. If there is no available instance data,
     *                           the savedInstanceState will be null.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {

        // code generated by Android Studio that initializes the View
        // and ActionBar of AddItem Activity
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_reminder);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        // initialize the Bundle with the data (shopping list id)
        // that was put in the Intent for AddItem activity
        bundle = this.getIntent().getExtras();

        // get the shopping list id in the Bundle and store it in the long
        id = bundle.getLong("_id");

        // initialize EditTexts
        titleEditText = (EditText) findViewById(R.id.titleEditText);
        dateEditText = (EditText) findViewById(R.id.dateEditText);

        // initialize Spinner
        typeSpinner = (Spinner) findViewById(R.id.typeSpinner);

        // initialize ArrayAdapter with values in quantities string array
        // and stylize it with style defined by simple_spinner_item
        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.type, android.R.layout.simple_spinner_item);

        // further stylize ArrayAdapter with style defined by simple_spinner_dropdown_item
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        // set ArrayAdapter on Spinner
        typeSpinner.setAdapter(adapter);

        // set OnItemSelectedListener on Spinner
        typeSpinner.setOnItemSelectedListener(this);

        // initialize DBHandler
        dbHandler = new DBHandler(this, null);

    }

    /**
     * This method gets called when the add Item in the Menu
     * gets pushed.  It validates that all required data has been input.
     * If it has been input, it adds it to the database and displays a Toast,
     * else it simply displays a Toast.
     * @param menuItem because the add Item that calls this method is
     *             in a Menu, we must pass the method a MenuItem.
     */
    public void addItem (MenuItem menuItem) {

        // get data input in EditTexts and store it in Strings
        String title = titleEditText.getText().toString();
        String date = dateEditText.getText().toString();

        // trim Strings and see if any are equal to an empty String
        if ((title.trim().equals("")) || (date.trim().equals("")) || (type.trim().equals(""))){
            // if any are equal to an empty String, then that means
            // required data hasn't been input, so display a toast
            Toast.makeText(this, "Please enter a title, date, and type!", Toast.LENGTH_LONG).show();
        } else {
            // if none are equal to an empty String, then that means
            // all required data has been input, so update the database
            // and display a toast
            dbHandler.addMyReminderList(title,date,type);
            Toast.makeText(this, "Item added!", Toast.LENGTH_LONG).show();
        }
    }

    /**
     * This method inflates (creates) the overflow menu for the AddItem Activity.
     * @param menu menu_add_item
     * @return true
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // inflate menu_create_list and add items to the ActionBar if present
        getMenuInflater().inflate(R.menu.menu_add_reminder, menu);
        return true;
    }

    /**
     * This method gets called when an item in the overFlow menu is selected.
     * @param item selected item; contains information about the item
     *             selected; for example, the id
     * @return true if item selected; else false
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        // get the id of the item selected
        switch (item.getItemId()){
            case R.id.action_home :
                // initialize an Intent for the Main Activity and start it
                // if the id is for the Main Activity
                intent = new Intent(this, MainActivity.class);
                startActivity(intent);
                return true;
            case R.id.action_create_list :
                // initialize an Intent for the CreateList Activity and start it
                // if the id is for the CreateList Activity
                intent = new Intent(this, CreateList.class);
                startActivity(intent);
                return true;
            default :
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * This method gets called when an item in the Spinner is selected.
     * @param adapterView Spinner AdapterView
     * @param view AddItem View
     * @param position position of item in Spinner that was selected
     * @param id database id of item in Spinner that was selected
     */
    @Override
    public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {
        type = adapterView.getItemAtPosition(position).toString();
    }

    @Override
    public void onNothingSelected(AdapterView<?> adapterView) {

    }
}
